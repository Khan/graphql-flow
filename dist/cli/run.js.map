{"version":3,"sources":["../../src/cli/run.js"],"names":["findGraphqlTagReferences","root","response","encoding","cwd","trim","split","map","relative","path","join","_","__","configFilePath","cliFiles","process","argv","console","log","exit","makeAbsPath","maybeRelativePath","basePath","isAbsolute","absConfigPath","config","inputFiles","length","crawl","dirname","files","f","text","resolvedPath","Error","filesHadErrors","Object","keys","forEach","key","file","errors","error","message","resolved","loc","schemaCache","getCachedSchemas","schemaFilePath","validationFailures","printedOperations","filePathAndLine","document","raw","hasNonFragments","definitions","some","kind","rawSource","literals","generateConfig","generate","withTypeNames","printed","includes","push","pragmaResult","strict","strictNullability","schemaForValidation","schemaForTypeGeneration","err","dumpOperations","parent","recursive","JSON","stringify","sort"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n// @flow\n/* eslint-disable no-console */\nimport type {Schema} from '../types';\nimport type {GraphQLSchema} from 'graphql/type/schema';\n\nimport {generateTypeFiles, processPragmas} from '../generateTypeFiles';\nimport {processFiles} from '../parser/parse';\nimport {resolveDocuments} from '../parser/resolve';\nimport {findApplicableConfig, getSchemas, loadConfigFile} from './config';\n\nimport {addTypenameToDocument} from 'apollo-utilities'; // eslint-disable-line flowtype-errors/uncovered\n\nimport {execSync} from 'child_process';\nimport {existsSync, mkdirSync, readFileSync, writeFileSync} from 'fs';\nimport {type DocumentNode} from 'graphql';\nimport {print} from 'graphql/language/printer';\nimport {validate} from 'graphql/validation';\nimport path from 'path';\nimport {dirname} from 'path';\n\n/**\n * This CLI tool executes the following steps:\n * 1) parse & validate config file\n * 2) crawl files to find all operations and fragments, with\n *   tagged template literals and expressions.\n * 3) resolve the found operations, passing the literals and\n *   fragments into the `graphql-tag` function to produce\n *   the DocumentNodes.\n * 4) generate types for all resolved Queries & Mutations\n */\n\n/** Step (1) */\n\nconst findGraphqlTagReferences = (root: string): Array<string> => {\n    const response = execSync(\n        \"git grep -I --word-regexp --name-only --fixed-strings 'graphql-tag' -- '*.js' '*.jsx' '*.ts' '*.tsx'\",\n        {\n            encoding: 'utf8',\n            cwd: root,\n        },\n    );\n    return response\n        .trim()\n        .split('\\n')\n        .map((relative) => path.join(root, relative));\n};\n\nconst [_, __, configFilePath, ...cliFiles] = process.argv;\n\nif (\n    configFilePath === '-h' ||\n    configFilePath === '--help' ||\n    configFilePath === 'help' ||\n    !configFilePath\n) {\n    console.log(`graphql-flow\n\nUsage: graphql-flow [configFile.json] [filesToCrawl...]`);\n    process.exit(1); // eslint-disable-line flowtype-errors/uncovered\n}\n\nconst makeAbsPath = (maybeRelativePath: string, basePath: string) => {\n    return path.isAbsolute(maybeRelativePath)\n        ? maybeRelativePath\n        : path.join(basePath, maybeRelativePath);\n};\n\nconst absConfigPath = makeAbsPath(configFilePath, process.cwd());\n\nconst config = loadConfigFile(absConfigPath);\n\nconst inputFiles = cliFiles.length\n    ? cliFiles\n    : findGraphqlTagReferences(\n          makeAbsPath(config.crawl.root, path.dirname(absConfigPath)),\n      );\n\n/** Step (2) */\n\nconst files = processFiles(inputFiles, (f) => {\n    if (existsSync(f)) {\n        return readFileSync(f, 'utf8');\n    }\n    if (existsSync(f + '.js')) {\n        return {text: readFileSync(f + '.js', 'utf8'), resolvedPath: f + '.js'};\n    }\n    if (existsSync(f + '.ts')) {\n        return {text: readFileSync(f + '.ts', 'utf8'), resolvedPath: f + '.ts'};\n    }\n    if (existsSync(f + '.tsx')) {\n        return {\n            text: readFileSync(f + '.tsx', 'utf8'),\n            resolvedPath: f + '.tsx',\n        };\n    }\n    throw new Error(`Unable to find ${f}`);\n});\n\nlet filesHadErrors = false;\nObject.keys(files).forEach((key) => {\n    const file = files[key];\n    if (file.errors.length) {\n        filesHadErrors = true;\n        console.error(`Errors in ${file.path}`);\n        file.errors.forEach((error) => {\n            console.error(` - ${error.message}`);\n        });\n    }\n});\n\nif (filesHadErrors) {\n    console.error('Aborting');\n    process.exit(1); // eslint-disable-line flowtype-errors/uncovered\n}\n\n/** Step (3) */\n\nconst {resolved, errors} = resolveDocuments(files);\nif (errors.length) {\n    errors.forEach((error) => {\n        console.error(`Resolution error ${error.message} in ${error.loc.path}`);\n    });\n    console.error('Aborting');\n    process.exit(1); // eslint-disable-line flowtype-errors/uncovered\n}\n\nconsole.log(Object.keys(resolved).length, 'resolved queries');\n\n/** Step (4) */\n\nconst schemaCache: {[key: string]: [GraphQLSchema, Schema]} = {};\nconst getCachedSchemas = (schemaFilePath: string) => {\n    if (!schemaCache[schemaFilePath]) {\n        schemaCache[schemaFilePath] = getSchemas(\n            makeAbsPath(schemaFilePath, path.dirname(absConfigPath)),\n        );\n    }\n\n    return schemaCache[schemaFilePath];\n};\n\nlet validationFailures: number = 0;\nconst printedOperations: Array<string> = [];\n\nObject.keys(resolved).forEach((filePathAndLine) => {\n    const {document, raw} = resolved[filePathAndLine];\n\n    const hasNonFragments = document.definitions.some(\n        ({kind}) => kind !== 'FragmentDefinition',\n    );\n    const rawSource: string = raw.literals[0];\n\n    const generateConfig = findApplicableConfig(\n        // strip off the trailing line number, e.g. `:23`\n        filePathAndLine.split(':')[0],\n        config.generate,\n    );\n    if (!generateConfig) {\n        return; // no generate config matches, bail\n    }\n\n    // eslint-disable-next-line flowtype-errors/uncovered\n    const withTypeNames: DocumentNode = addTypenameToDocument(document);\n    const printed = print(withTypeNames);\n    if (hasNonFragments && !printedOperations.includes(printed)) {\n        printedOperations.push(printed);\n    }\n\n    const pragmaResult = processPragmas(\n        generateConfig,\n        config.crawl,\n        rawSource,\n    );\n    if (!pragmaResult.generate) {\n        return;\n    }\n    if (pragmaResult.strict != null) {\n        generateConfig.strictNullability = pragmaResult.strict;\n    }\n\n    const [schemaForValidation, schemaForTypeGeneration] = getCachedSchemas(\n        generateConfig.schemaFilePath,\n    );\n\n    if (hasNonFragments) {\n        /* eslint-disable flowtype-errors/uncovered */\n        const errors = validate(schemaForValidation, withTypeNames);\n        /* eslint-disable flowtype-errors/uncovered */\n        if (errors.length) {\n            errors.forEach((error) => {\n                console.error(\n                    `Schema validation found errors for ${raw.loc.path}!`,\n                );\n                console.error(printed);\n                console.error(error);\n                validationFailures++;\n            });\n        }\n        /* eslint-enable flowtype-errors/uncovered */\n    }\n\n    try {\n        generateTypeFiles(\n            raw.loc.path,\n            schemaForTypeGeneration,\n            withTypeNames,\n            generateConfig,\n        );\n        // eslint-disable-next-line flowtype-errors/uncovered\n    } catch (err) {\n        console.error(`Error while generating operation from ${raw.loc.path}`);\n        console.error(printed);\n        // eslint-disable-next-line flowtype-errors/uncovered\n        console.error(err);\n        validationFailures++;\n    }\n});\n\nif (validationFailures) {\n    console.error(\n        `Encountered ${validationFailures} validation failures while printing types.`,\n    );\n    // eslint-disable-next-line flowtype-errors/uncovered\n    process.exit(1);\n}\n\nif (config.crawl.dumpOperations) {\n    const dumpOperations = config.crawl.dumpOperations;\n    const parent = dirname(dumpOperations);\n    mkdirSync(parent, {recursive: true});\n    writeFileSync(\n        dumpOperations,\n        JSON.stringify(printedOperations.sort(), null, 2),\n    );\n}\n"],"file":"run.js"}