{"version":3,"sources":["../src/utils.js"],"names":["liftLeadingPropertyComments","property","transferLeadingComments","value","maybeAddDescriptionComment","description","node","addCommentAsLineComments","res","leadingComments","length","babelTypes","addComment","source","dest"],"mappings":";;;;;;;;AAEA;;;;;;AAGO,MAAMA,2BAA2B,GACpCC,QADuC,IAET;AAC9B,SAAOC,uBAAuB,CAACD,QAAQ,CAACE,KAAV,EAAiBF,QAAjB,CAA9B;AACH,CAJM;;;;AAMA,MAAMG,0BAA0B,GAAG,CACtCC,WADsC,EAEtCC,IAFsC,KAGlC;AACJ,MAAID,WAAJ,EAAiB;AACbE,IAAAA,wBAAwB,CAACF,WAAD,EAAcC,IAAd,CAAxB;AACH;;AACD,SAAOA,IAAP;AACH,CARM;;;;AAUA,SAASC,wBAAT,CACHF,WADG,EAEHG,GAFG,EAGL;AAAA;;AACE,8BAAIA,GAAG,CAACC,eAAR,iDAAI,qBAAqBC,MAAzB,EAAiC;AAC7BF,IAAAA,GAAG,CAACC,eAAJ,CAAoB,CAApB,EAAuBN,KAAvB,IAAgC,gBAAgBE,WAAhD;AACH,GAFD,MAEO;AACHM,IAAAA,UAAU,CAACC,UAAX,CACIJ,GADJ,EAEI,SAFJ,EAGI,OAAOH,WAHX,EAII,KAJJ,CAIW;AAJX;AAMH;AACJ;;AAEM,MAAMH,uBAAuB,GAAG,CACnCW,MADmC,EAEnCC,IAFmC,KAG/B;AAAA;;AACJ,+BAAID,MAAM,CAACJ,eAAX,kDAAI,sBAAwBC,MAA5B,EAAoC;AAChCI,IAAAA,IAAI,CAACL,eAAL,GAAuB,CACnB,IAAIK,IAAI,CAACL,eAAL,IAAwB,EAA5B,CADmB,EAEnB,GAAGI,MAAM,CAACJ,eAFS,CAAvB;AAIAI,IAAAA,MAAM,CAACJ,eAAP,GAAyB,EAAzB;AACH;;AACD,SAAOK,IAAP;AACH,CAZM","sourcesContent":["// @flow\n\nimport * as babelTypes from '@babel/types';\nimport {BabelNodeObjectTypeProperty} from '@babel/types';\n\nexport const liftLeadingPropertyComments = (\n    property: BabelNodeObjectTypeProperty,\n): BabelNodeObjectTypeProperty => {\n    return transferLeadingComments(property.value, property);\n};\n\nexport const maybeAddDescriptionComment = <T: babelTypes.BabelNode>(\n    description: ?string,\n    node: T,\n): T => {\n    if (description) {\n        addCommentAsLineComments(description, node);\n    }\n    return node;\n};\n\nexport function addCommentAsLineComments(\n    description: string,\n    res: babelTypes.BabelNode,\n) {\n    if (res.leadingComments?.length) {\n        res.leadingComments[0].value += '\\n\\n---\\n\\n' + description;\n    } else {\n        babelTypes.addComment(\n            res,\n            'leading',\n            '* ' + description,\n            false, // this specifies that it's a block comment, not a line comment\n        );\n    }\n}\n\nexport const transferLeadingComments = <T: babelTypes.BabelNode>(\n    source: babelTypes.BabelNode,\n    dest: T,\n): T => {\n    if (source.leadingComments?.length) {\n        dest.leadingComments = [\n            ...(dest.leadingComments || []),\n            ...source.leadingComments,\n        ];\n        source.leadingComments = [];\n    }\n    return dest;\n};\n"],"file":"utils.js"}