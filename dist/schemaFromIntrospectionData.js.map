{"version":3,"sources":["../src/schemaFromIntrospectionData.js"],"names":["schemaFromIntrospectionData","schema","result","interfacesByName","typesByName","inputObjectsByName","unionsByName","enumsByName","__schema","types","forEach","type","kind","name","possibleTypesByName","fieldsByName","possibleTypes","p","fields","field"],"mappings":";;;;;;;AACA;AACA;AACA;AACA;AAIO,MAAMA,2BAA2B,GACpCC,MADuC,IAE9B;AACT,QAAMC,MAAc,GAAG;AACnBC,IAAAA,gBAAgB,EAAE,EADC;AAEnBC,IAAAA,WAAW,EAAE,EAFM;AAGnBC,IAAAA,kBAAkB,EAAE,EAHD;AAInBC,IAAAA,YAAY,EAAE,EAJK;AAKnBC,IAAAA,WAAW,EAAE;AALM,GAAvB;;AAQAN,EAAAA,MAAM,CAACO,QAAP,CAAgBC,KAAhB,CAAsBC,OAAtB,CAA+BC,IAAD,IAAU;AACpC,QAAIA,IAAI,CAACC,IAAL,KAAc,MAAlB,EAA0B;AACtBV,MAAAA,MAAM,CAACK,WAAP,CAAmBI,IAAI,CAACE,IAAxB,IAAgCF,IAAhC;AACA;AACH;;AACD,QAAIA,IAAI,CAACC,IAAL,KAAc,OAAlB,EAA2B;AACvBV,MAAAA,MAAM,CAACI,YAAP,CAAoBK,IAAI,CAACE,IAAzB,IAAiCF,IAAjC;AACA;AACH;;AACD,QAAIA,IAAI,CAACC,IAAL,KAAc,WAAlB,EAA+B;AAC3BV,MAAAA,MAAM,CAACC,gBAAP,CAAwBQ,IAAI,CAACE,IAA7B,IAAqC,EACjC,GAAGF,IAD8B;AAEjCG,QAAAA,mBAAmB,EAAE,EAFY;AAGjCC,QAAAA,YAAY,EAAE;AAHmB,OAArC;AAKAJ,MAAAA,IAAI,CAACK,aAAL,CAAmBN,OAAnB,CACKO,CAAD,IACKf,MAAM,CAACC,gBAAP,CAAwBQ,IAAI,CAACE,IAA7B,EAAmCC,mBAAnC,CACGG,CAAC,CAACJ,IADL,IAEG,IAJZ;AAMAF,MAAAA,IAAI,CAACO,MAAL,CAAYR,OAAZ,CAAqBS,KAAD,IAAW;AAC3BjB,QAAAA,MAAM,CAACC,gBAAP,CAAwBQ,IAAI,CAACE,IAA7B,EAAmCE,YAAnC,CAAgDI,KAAK,CAACN,IAAtD,IACIM,KADJ;AAEH,OAHD;AAIA;AACH;;AACD,QAAIR,IAAI,CAACC,IAAL,KAAc,cAAlB,EAAkC;AAC9BV,MAAAA,MAAM,CAACG,kBAAP,CAA0BM,IAAI,CAACE,IAA/B,IAAuCF,IAAvC;AACA;AACH;;AACD,QAAIA,IAAI,CAACC,IAAL,KAAc,QAAlB,EAA4B;AACxB;AACH;;AACDV,IAAAA,MAAM,CAACE,WAAP,CAAmBO,IAAI,CAACE,IAAxB,IAAgC,EAC5B,GAAGF,IADyB;AAE5BI,MAAAA,YAAY,EAAE;AAFc,KAAhC;;AAIA,QAAI,CAACJ,IAAI,CAACO,MAAV,EAAkB;AACd;AACH;;AAEDP,IAAAA,IAAI,CAACO,MAAL,CAAYR,OAAZ,CAAqBS,KAAD,IAAW;AAC3BjB,MAAAA,MAAM,CAACE,WAAP,CAAmBO,IAAI,CAACE,IAAxB,EAA8BE,YAA9B,CAA2CI,KAAK,CAACN,IAAjD,IAAyDM,KAAzD;AACH,KAFD;AAGH,GA7CD;;AA+CA,SAAOjB,MAAP;AACH,CA3DM","sourcesContent":["// @flow\n/**\n * Takes the introspectionQuery response and parses it into the \"Schema\"\n * type that we use to look up types, interfaces, etc.\n */\nimport type {IntrospectionQuery} from 'graphql';\nimport type {Schema} from './types';\n\nexport const schemaFromIntrospectionData = (\n    schema: IntrospectionQuery,\n): Schema => {\n    const result: Schema = {\n        interfacesByName: {},\n        typesByName: {},\n        inputObjectsByName: {},\n        unionsByName: {},\n        enumsByName: {},\n    };\n\n    schema.__schema.types.forEach((type) => {\n        if (type.kind === 'ENUM') {\n            result.enumsByName[type.name] = type;\n            return;\n        }\n        if (type.kind === 'UNION') {\n            result.unionsByName[type.name] = type;\n            return;\n        }\n        if (type.kind === 'INTERFACE') {\n            result.interfacesByName[type.name] = {\n                ...type,\n                possibleTypesByName: {},\n                fieldsByName: {},\n            };\n            type.possibleTypes.forEach(\n                (p) =>\n                    (result.interfacesByName[type.name].possibleTypesByName[\n                        p.name\n                    ] = true),\n            );\n            type.fields.forEach((field) => {\n                result.interfacesByName[type.name].fieldsByName[field.name] =\n                    field;\n            });\n            return;\n        }\n        if (type.kind === 'INPUT_OBJECT') {\n            result.inputObjectsByName[type.name] = type;\n            return;\n        }\n        if (type.kind === 'SCALAR') {\n            return;\n        }\n        result.typesByName[type.name] = {\n            ...type,\n            fieldsByName: {},\n        };\n        if (!type.fields) {\n            return;\n        }\n\n        type.fields.forEach((field) => {\n            result.typesByName[type.name].fieldsByName[field.name] = field;\n        });\n    });\n\n    return result;\n};\n"],"file":"schemaFromIntrospectionData.js"}