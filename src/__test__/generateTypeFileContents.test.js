// @flow
// Test the generate the type file contents

import {getSchemas} from '../cli/config';
import {generateTypeFileContents, indexPrelude} from '../generateTypeFiles';
import gql from 'graphql-tag';

const [_, exampleSchema] = getSchemas(__dirname + '/example-schema.graphql');

describe('generateTypeFileContents', () => {
    it('split types should export response & variables types', () => {
        const {indexContents, files} = generateTypeFileContents(
            'hello.js',
            exampleSchema,
            gql`
                query Hello {
                    human(id: "Han") {
                        id
                    }
                }
            `,
            {splitTypes: true},
            '__generated__',
            indexPrelude('yarn queries'),
        );
        expect(indexContents).toMatchInlineSnapshot(`
            "// @flow
            //
            // AUTOGENERATED
            // NOTE: New response types are added to this file automatically.
            //       Outdated response types can be removed manually as they are deprecated.
            //      To regenerate, run yarn queries
            //

            export type {HelloType} from './Hello.js';
            "
        `);
        expect(
            Object.keys(files)
                .map((k) => `// ${k}\n${files[k]}`)
                .join('\n\n'),
        ).toMatchInlineSnapshot(`
            "// __generated__/Hello.js
            // @flow
            // AUTOGENERATED -- DO NOT EDIT
            // Generated for operation 'Hello' in file '../hello.js'
            export type HelloType = {|
                variables: {||},
                response: {|
              /** A human character*/
              human: ?{|
                id: string
              |}
            |}
            |};
            export type Hello = HelloType['response'];
            export type HelloVariables = HelloType['variables'];
            "
        `);
    });

    it('should respect the typeFileName option', () => {
        const {files} = generateTypeFileContents(
            'hello.js',
            exampleSchema,
            gql`
                query Hello {
                    human(id: "Han") {
                        id
                    }
                }
            `,
            {
                splitTypes: true,
                typeFileName: 'prefix-[operationName]-suffix.js',
            },
            '__generated__',
            indexPrelude('yarn queries'),
        );
        expect(
            Object.keys(files)
                .map((k) => `// ${k}\n${files[k]}`)
                .join('\n\n'),
        ).toMatchInlineSnapshot(`
            "// __generated__/prefix-Hello-suffix.js
            // @flow
            // AUTOGENERATED -- DO NOT EDIT
            // Generated for operation 'Hello' in file '../hello.js'
            export type HelloType = {|
                variables: {||},
                response: {|
              /** A human character*/
              human: ?{|
                id: string
              |}
            |}
            |};
            export type Hello = HelloType['response'];
            export type HelloVariables = HelloType['variables'];
            "
        `);
    });
});
