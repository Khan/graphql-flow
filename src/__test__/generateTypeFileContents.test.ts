// Test the generate the type file contents

import {getSchemas} from '../cli/config';
import {generateTypeFileContents, indexPrelude} from '../generateTypeFiles';
import gql from 'graphql-tag';

const [_, exampleSchema] = getSchemas(__dirname + '/example-schema.graphql');

describe('generateTypeFileContents', () => {
    it('split types should export response & variables types', () => {
        const {indexContents, files} = generateTypeFileContents(
            'hello.js',
            exampleSchema,
            gql`
                query Hello {
                    human(id: "Han") {
                        id
                    }
                }
            `,
            {splitTypes: true, schemaFilePath: ''},
            '__generated__',
            indexPrelude('yarn queries'),
        );
        expect(indexContents).toMatchInlineSnapshot(`
            "// AUTOGENERATED
            // NOTE: New response types are added to this file automatically.
            //       Outdated response types can be removed manually as they are deprecated.
            //      To regenerate, run yarn queries
            //

            export type {HelloType} from './Hello.ts';
            "
        `);
        expect(
            Object.keys(files)
                .map((k: any) => `// ${k}\n${files[k]}`)
                .join('\n\n'),
        ).toMatchInlineSnapshot(`
            "// __generated__/Hello.ts
            // AUTOGENERATED -- DO NOT EDIT
            // Generated for operation 'Hello' in file '../hello.js'
            export type HelloType = {
                variables: {},
                response: {
              human:
              /** A human character*/
              {
                id: string;
              } | null | undefined;
            }
            };
            export type Hello = HelloType['response'];
            export type HelloVariables = HelloType['variables'];
            "
        `);
    });

    it('should respect the typeFileName option', () => {
        const {files} = generateTypeFileContents(
            'hello.js',
            exampleSchema,
            gql`
                query Hello {
                    human(id: "Han") {
                        id
                    }
                }
            `,
            {
                splitTypes: true,
                typeFileName: 'prefix-[operationName]-suffix.js',
                schemaFilePath: '',
            },
            '__generated__',
            indexPrelude('yarn queries'),
        );
        expect(
            Object.keys(files)
                .map((k: any) => `// ${k}\n${files[k]}`)
                .join('\n\n'),
        ).toMatchInlineSnapshot(`
            "// __generated__/prefix-Hello-suffix.js
            // AUTOGENERATED -- DO NOT EDIT
            // Generated for operation 'Hello' in file '../hello.js'
            export type HelloType = {
                variables: {},
                response: {
              human:
              /** A human character*/
              {
                id: string;
              } | null | undefined;
            }
            };
            export type Hello = HelloType['response'];
            export type HelloVariables = HelloType['variables'];
            "
        `);
    });

    describe('experimentalEnums', () => {
        it('should generate the expected values', () => {
            const {files} = generateTypeFileContents(
                'hello.js',
                exampleSchema,
                gql`
                    query Hello {
                        human(id: "Han") {
                            appearsIn
                        }
                    }
                `,
                {
                    experimentalEnums: true,
                    schemaFilePath: '',
                },
                '__generated__',
                indexPrelude('yarn queries'),
            );
            expect(
                Object.keys(files)
                    .map((k: any) => `// ${k}\n${files[k]}`)
                    .join('\n\n'),
            ).toMatchInlineSnapshot(`
                "// __generated__/Hello.ts
                // AUTOGENERATED -- DO NOT EDIT
                // Generated for operation 'Hello' in file '../hello.js'
                export type HelloType = {
                    variables: {},
                    response: {
                  human:
                  /** A human character*/
                  {
                    appearsIn: ReadonlyArray<
                    /** - NEW_HOPE
                    - EMPIRE
                    - JEDI*/
                    Episode | null | undefined> | null | undefined;
                  } | null | undefined;
                }
                };
                /* eslint-disable no-undef */
                export enum Episode {
                  NEW_HOPE = \\"NEW_HOPE\\",
                  EMPIRE = \\"EMPIRE\\",
                  JEDI = \\"JEDI\\",
                };
                /* eslint-enable no-undef */
                "
            `);
        });
    });
});
